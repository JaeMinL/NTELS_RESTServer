#include <unistd.h>
#include <stdio.h>
#include <mysql/mysql.h>
#include <stdlib.h>
#include <string.h>

#include "gendef.h"
#include "comlib.h"
#include "comlib.x"
#include "thrlib.h"
#include "thrlib.x"
#include "trnlib.h"
#include "trnlib.x"
#include "loglib.h"
#include "loglib.x"
#include "rrllib.h"
#include "rrllib.x"
#include "rsvlib.h"
#include "rsvlib.x"

#include "rest_stat.h"

#define DB_HOST "192.168.6.84"
#define DB_USER "sdv"
#define DB_PW "sdv2016"
#define DB_NAME "SDV"

FT_PRIVATE RT_RESULT host_1min(UINT mthod, RsvlibSesCb *sesCb);
FT_PRIVATE RT_RESULT host_5min(UINT mthod, RsvlibSesCb *sesCb);
FT_PRIVATE RT_RESULT host_hour(UINT mthod, RsvlibSesCb *sesCb);
FT_PRIVATE RT_RESULT host_day(UINT mthod, RsvlibSesCb *sesCb);

FT_PRIVATE RT_RESULT service_1min(UINT mthod, RsvlibSesCb *sesCb);
FT_PRIVATE RT_RESULT service_5min(UINT mthod, RsvlibSesCb *sesCb);
FT_PRIVATE RT_RESULT service_hour(UINT mthod, RsvlibSesCb *sesCb);
FT_PRIVATE RT_RESULT service_day(UINT mthod, RsvlibSesCb *sesCb);

FT_PRIVATE RT_RESULT dbResult(CHAR * query, RsvlibSesCb *sesCb);


FT_PRIVATE RT_RESULT dbResult(CHAR * query, RsvlibSesCb *sesCb){
	MYSQL *conn;
	MYSQL_RES *res;
        MYSQL_ROW row;
	MYSQL_RES *res_s;
	UINT i; 	
	UINT fields;
	ULONG length=0;
	CHAR *row_ptr = NULL;

        conn = mysql_init(NULL); 
        if(!mysql_real_connect(conn, DB_HOST, DB_USER, DB_PW, DB_NAME, 0, NULL, 0))return RC_NOK;

        if(mysql_query(conn, query)){
		fprintf(stderr, "%s\n", mysql_error(conn));
		mysql_close(conn);
		printf("error!!!!");
		exit(1);
	}

	res_s = mysql_store_result(conn);

	fields = mysql_num_fields(res_s);	

        printf("Query results : \n");
	
	while((row = mysql_fetch_row(res_s)) != NULL)
	{
              for(i=0; i<fields; i++){
			length+=sizeof(row[i]);
			length+=1;
              }
             length+=2;
        }
	row_ptr = malloc(sizeof(CHAR)*length);
	
	mysql_query(conn, query);
	res = mysql_store_result(conn);
    	while((row = mysql_fetch_row(res)) != NULL)
	{
		for(i=0; i<fields; i++){
			strcat(row_ptr , row[i]);
			if(i+1 != fields){
				strcat(row_ptr, ",");
			}
		}
		strcat(row_ptr, "\n");
	}
	rsvlib_apiSetRspDat(sesCb, row_ptr, RC_TRUE);
	
	free(row_ptr);
	mysql_free_result(res_s);
        mysql_free_result(res);
        mysql_close(conn);
        return RC_OK;
}



FT_PRIVATE RT_RESULT host_1min(UINT mthod, RsvlibSesCb *sesCb)
{
    RrllibDocArg *docArg = NULL;
    UINT strNameLen = 0;
    CONST CHAR *strName = NULL;

    CHAR *table="TSD_STAT_HOST_1MIN";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*256); 

    rsvlib_apiFindArg(sesCb, "name", &docArg);
    
    rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);
    
    printf("RECEIVE host name=%.*s\n", strNameLen, strName);

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, " WHERE HOST_ID = (SELECT HOST_ID FROM TSD_HOST WHERE HOST_NAME = '");
    strcat(query, strName);
    strcat(query, "')");
    printf("%s\n", query);

    dbResult(query, sesCb);

    return RC_OK;
}

FT_PRIVATE RT_RESULT host_5min(UINT mthod, RsvlibSesCb *sesCb){
    RrllibDocArg *docArg = NULL;
    UINT strNameLen = 0;
    CONST CHAR *strName = NULL;

    CHAR *table="TSD_STAT_HOST_5MIN";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*256); 

    rsvlib_apiFindArg(sesCb, "name", &docArg);
    
    rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);

    printf("RECEIVE host name=%.*s\n", strNameLen, strName);

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, " WHERE HOST_ID = (SELECT HOST_ID FROM TSD_HOST WHERE HOST_NAME = '");
    strcat(query, strName);
    strcat(query, "')");
    printf("%s\n", query);

    dbResult(query, sesCb);

    return RC_OK;
}

FT_PRIVATE RT_RESULT host_hour(UINT mthod, RsvlibSesCb *sesCb){
    RrllibDocArg *docArg = NULL;
    UINT strNameLen = 0;
    CONST CHAR *strName = NULL;

    CHAR *table="TSD_STAT_HOST_HOUR";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*256); 

    rsvlib_apiFindArg(sesCb, "name", &docArg);
    
    rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);

    printf("RECEIVE host name=%.*s\n", strNameLen, strName);

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, " WHERE HOST_ID = (SELECT HOST_ID FROM TSD_HOST WHERE HOST_NAME = '");
    strcat(query, strName);
    strcat(query, "')");
    printf("%s\n", query);

    dbResult(query, sesCb);

    return RC_OK;
}

FT_PRIVATE RT_RESULT host_day(UINT mthod, RsvlibSesCb *sesCb){
    RrllibDocArg *docArg = NULL;
    UINT strNameLen = 0;
    CONST CHAR *strName = NULL;

    CHAR *table="TSD_STAT_HOST_DAY";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*256); 

    rsvlib_apiFindArg(sesCb, "name", &docArg);
    
    rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);

    printf("RECEIVE host name=%.*s\n", strNameLen, strName);

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, " WHERE HOST_ID = (SELECT HOST_ID FROM TSD_HOST WHERE HOST_NAME = '");
    strcat(query, strName);
    strcat(query, "')");
    printf("%s\n", query);

    dbResult(query, sesCb);

    return RC_OK;
}

FT_PRIVATE RT_RESULT service_1min(UINT mthod, RsvlibSesCb *sesCb)
{
    RrllibDocArg *docArg = NULL;
    UINT strNameLen = 0;
    CONST CHAR *strName = NULL;

    CHAR *table="TSD_STAT_SERVICE_1MIN";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*256);

    rsvlib_apiFindArg(sesCb, "name", &docArg);

    rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);

    printf("RECEIVE host name=%.*s\n", strNameLen, strName);

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, " WHERE SERVICE_ID = (SELECT SERVICE_ID FROM TSD_SVC WHERE SERVICE_NAME = '");
    strcat(query, strName);
    strcat(query, "')");
    printf("%s\n", query);

    dbResult(query, sesCb);

    return RC_OK;
}

FT_PRIVATE RT_RESULT service_5min(UINT mthod, RsvlibSesCb *sesCb)
{
    RrllibDocArg *docArg = NULL;
    UINT strNameLen = 0;
    CONST CHAR *strName = NULL;

    CHAR *table="TSD_STAT_SERVICE_5MIN";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*256);

    rsvlib_apiFindArg(sesCb, "name", &docArg);

    rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);

    printf("RECEIVE host name=%.*s\n", strNameLen, strName);

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, " WHERE SERVICE_ID = (SELECT SERVICE_ID FROM TSD_SVC WHERE SERVICE_NAME = '");
    strcat(query, strName);
    strcat(query, "')");
    printf("%s\n", query);

    dbResult(query, sesCb);

    return RC_OK;
}


#define QUERY_LEN 256
FT_PRIVATE RT_RESULT service_hour(UINT mthod, RsvlibSesCb *sesCb)
{
	RrllibDocArg *docArg = NULL;
	UINT strNameLen = 0;
	CONST CHAR *strName = NULL;

	CHAR *table="TSD_STAT_SERVICE_HOUR";
	CHAR *query = (CHAR *)malloc(sizeof(CHAR)*QUERY_LEN);

	rsvlib_apiFindArg(sesCb, "name", &docArg);

	rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);

	printf("RECEIVE host name=%.*s\n", strNameLen, strName);

#if 0
	snprintf(query,QUERY_LEN, "SELECT * from %s WHERE SERVICE_ID = (SELECT SERVICE_ID FROM TSD_SVC WHERE SERVICE_NAME = '%s')",
			table,
			strName
		);
#endif

	comlib_strCpy(query, "SELECT * from ");
	strcat(query, table);
	strcat(query, " WHERE SERVICE_ID = (SELECT SERVICE_ID FROM TSD_SVC WHERE SERVICE_NAME = '");
	strcat(query, strName);
	strcat(query, "')");
	printf("%s\n", query);

	dbResult(query, sesCb);

	return RC_OK;
}

FT_PRIVATE RT_RESULT service_day(UINT mthod, RsvlibSesCb *sesCb)
{
    RrllibDocArg *docArg = NULL;
    UINT strNameLen = 0;
    CONST CHAR *strName = NULL;

    CHAR *table="TSD_STAT_SERVICE_DAY";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*256);

    rsvlib_apiFindArg(sesCb, "name", &docArg);

    rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);

    printf("RECEIVE host name=%.*s\n", strNameLen, strName);

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, " WHERE SERVICE_ID = (SELECT SERVICE_ID FROM TSD_SVC WHERE SERVICE_NAME = '");
    strcat(query, strName);
    strcat(query, "')");
    printf("%s\n", query);

    dbResult(query, sesCb);

    return RC_OK;
}

FT_PRIVATE RT_RESULT host_1min_time(UINT mthod, RsvlibSesCb *sesCb)
{	
    printf("!!!!!11min_time\n");
    //RrllibDocArg *docArg = NULL;
    RrllibDocArg *startArg = NULL;
    UINT strStartLen = 0;
    CONST CHAR *strStart = NULL;

    RrllibDocArg *endArg = NULL;
    UINT strEndLen = 0;
    CONST CHAR *strEnd = NULL;

    CHAR *table="TSD_STAT_HOST_1MIN";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*256);
    
    SINT ret = RC_OK;

    rsvlib_apiFirstArg(sesCb, &startArg);    
    rsvlib_apiFirstArgVal(startArg, &strStart, &strStartLen);

    rsvlib_apiNxtArg(sesCb, &endArg);
    rsvlib_apiFirstArgVal(endArg, &strEnd, &strEndLen);

    printf("RECEIVE start time=%.*s\n", strStartLen, strStart);

    printf("RECEIVE end time=%.*s\n", strEndLen, strEnd);

#if 0
    RrllibDoc *doc = NULL;
    doc = sesCb->req.doc;

    CONST CHAR *dat = NULL;
    UINT datLen = NULL;

    while(1){ 
        ret = rrllib_docGetNxtArg(doc, &docArg);
	printf("dat1 ?\n");
        if(ret == RC_OK){
            while(1){
		printf("while__\n");
                ret = rrllib_docGetNxtVal(docArg, &dat, &datLen);
                if(ret != RC_OK){
                    break;
                }
                fprintf(stderr,"dat=%.*s\n",datLen, dat);
            }
        }
       else {
            break;
         }
    }

#endif

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, " WHERE UPDATE_DATE <= '");
    //strcat(query, strStart);
    strcat(query, "'");
    printf("%s\n", query);

    //dbResult(query, sesCb);

    return RC_OK;
}


FT_PUBLIC VOID logPrnt(UINT lvl, CHAR *file, UINT line, CHAR *logStr)
{
    printf("[%d][%s:%d] %s\n",lvl, file, line, logStr);
}


int main()
{
    SINT ret = RC_OK;
    LoglibCfg logCfg;
    RsvlibGenCfg rsvCfg;
    LoglibCb loglibCb;

    /* log setting */
    LOGLIB_GLOB_INIT();

    LOGLIB_INIT_CFG(&logCfg);

    loglib_apiInitLoglibCb(&loglibCb, &logCfg);

    /* rest server setting */
    RSV_INIT_GEN_CFG(&rsvCfg, 8800);

    ret = rsvlib_apiInit(1, &rsvCfg);
    if(ret != RC_OK){
        LOGLIB_ERR(&loglibCb, "REST SERVER INIT FAILED(ret=%d)\n", ret);
        return -1;
    }

    rsvlib_apiSetLogFunc(RSV_DBG, logPrnt);

    /* url rule setting */
    //ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/test", "{id}", NULL, test);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/1min", "{name}", NULL, host_1min);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/5min", "{name}", NULL, host_5min);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/hour", "{name}", NULL, host_hour);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/day", "{name}", NULL, host_day);

    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/sdv/1min", "{name}", NULL, service_1min);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/sdv/5min", "{name}", NULL, service_5min);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/sdv/hour", "{name}", NULL, service_hour);    
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/sdv/day", "{name}", NULL, service_day);    

    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/1min/time", "{start} [end]", NULL, host_1min_time);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/5min", "{start} [end]", NULL, service_day);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/hour", "{start} [end]", NULL, service_day);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/day", "{start} [end]", NULL, service_day);

    /* run rest server */
    rsvlib_apiRun(1);

    while(1){
        sleep(1);
    }

    return 0;
}
