#include <unistd.h>
#include <stdio.h>
#include <mysql/mysql.h>
#include <stdlib.h>
#include <string.h>

#include "gendef.h"
#include "comlib.h"
#include "comlib.x"
#include "thrlib.h"
#include "thrlib.x"
#include "trnlib.h"
#include "trnlib.x"
#include "loglib.h"
#include "loglib.x"
#include "rrllib.h"
#include "rrllib.x"
#include "rsvlib.h"
#include "rsvlib.x"

#include "rest_stat.h"

#define DB_HOST "192.168.6.84"
#define DB_USER "sdv"
#define DB_PW "sdv2016"
#define DB_NAME "SDV"

FT_PRIVATE RT_RESULT test(UINT mthod, RsvlibSesCb *sesCb);
FT_PRIVATE RT_RESULT dbResult(CHAR * query);

FT_PRIVATE RT_RESULT dbResult(CHAR * query){
	MYSQL *conn;
        MYSQL_RES *res;
        MYSQL_ROW row;
 
        conn = mysql_init(NULL);
 
        if(!mysql_real_connect(conn,DB_HOST,DB_USER,DB_PW,DB_NAME,0,NULL,0))
        {
                return RC_NOK;
        }
        if(mysql_query(conn,"show tables"))
        {
                return RC_NOK;
        }
 
        res = mysql_use_result(conn);
        printf("MYSQL Tables in mysql database : \n");
        while((row = mysql_fetch_row(res)) != NULL)
                printf("%s \n",row[0]);
 
 
        if(mysql_query(conn,query))
        {
                return RC_OK;
        }
 
        res = mysql_use_result(conn);
 
        printf("Returning List of Names : \n");
        while((row = mysql_fetch_row(res)) != NULL)
                printf("%s %s %s \n",row[0],row[1],row[2]);
 
 
        mysql_free_result(res);
        mysql_close(conn);
        return RC_OK;
}



FT_PRIVATE RT_RESULT test(UINT mthod, RsvlibSesCb *sesCb)
{
    RrllibDocArg *docArg = NULL;
    UINT strNameLen = 0;
    CONST CHAR *strName = NULL;

    CHAR *table="TSD_STAT_HOST_DAY";
    CHAR *query = (CHAR *)malloc(sizeof(CHAR)*100); 

    rsvlib_apiFindArg(sesCb, "name", &docArg);

    rsvlib_apiFirstArgVal(docArg, &strName, &strNameLen);
    
    //rsvlib_apiSetRspDat(sesCb, query, RC_TRUE);
    
    printf("RECEIVE host name=%.*s\n", strNameLen, strName);

    comlib_strCpy(query, "SELECT * from ");
    strcat(query, table);
    strcat(query, "WHERE HOST_ID = (SELECT HOST_ID FROM TSD_HOST WHERE HOST_NAME = ");
    strcat(query, strName);
    strcat(query, ");");
    printf("%s\n", query);

    dbResult(query);

    rsvlib_apiSetRspDat(sesCb, "????", RC_TRUE);

    return RC_OK;
}

FT_PUBLIC VOID logPrnt(UINT lvl, CHAR *file, UINT line, CHAR *logStr)
{
    printf("[%d][%s:%d] %s\n",lvl, file, line, logStr);
}


int main()
{
    SINT ret = RC_OK;
    LoglibCfg logCfg;
    RsvlibGenCfg rsvCfg;
    LoglibCb loglibCb;

    /* log setting */
    LOGLIB_GLOB_INIT();

    LOGLIB_INIT_CFG(&logCfg);

    loglib_apiInitLoglibCb(&loglibCb, &logCfg);

    /* rest server setting */
    RSV_INIT_GEN_CFG(&rsvCfg, 8800);

    ret = rsvlib_apiInit(1, &rsvCfg);
    if(ret != RC_OK){
        LOGLIB_ERR(&loglibCb, "REST SERVER INIT FAILED(ret=%d)\n", ret);
        return -1;
    }

    rsvlib_apiSetLogFunc(RSV_DBG, logPrnt);

    /* url rule setting */
    //ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/test", "{id}", NULL, test);
    ret = rsvlib_apiSetRule(1, RSV_MTHOD_GET, "/host/1min", "[name]", NULL, test);

    /* run rest server */
    rsvlib_apiRun(1);

    while(1){
        sleep(1);
    }

    return 0;
}
